# Challenge 3-8
# Create the MT19937 stream cipher and break it

from MT19937 import MT19937
from Cryptopals_main import StreamCipher

def main(btext, seed):
    # Takes text, XOR's it against stream generated by MT19937 RNG with given seed
    # Repeats the process with ciphertext to check we're back where we started

    # Obtain stream from RNG
    c3_8_stream = MT19937(seed).stream()

    # Declare stream cipher
    c3_8_text = btext
    c3_8 = StreamCipher(c3_8_text, stream=c3_8_stream)

    # Encode
    encoded = c3_8.encode()
    print(f'Encoded text:\n{encoded}\n')

    # Reinitiate stream
    c3_8_stream = MT19937(seed).stream()

    # Declare stream cipher
    c3_8 = StreamCipher(encoded, stream=c3_8_stream)

    # Decode (same code as for encoding)
    og_text = c3_8.encode()

    assert og_text == btext  # Check we're back where we started

    # Print success
    print('Cipher successfully reversed itself !')
    print(og_text)


if __name__ == "__main__":
    main(b'Honis soit qui mal y pense', 1729)
